import React, { useState } from 'react';
import './UserpregnancyPage.scss';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { FaCalendarAlt } from 'react-icons/fa';
// import your API service here, e.g., import userPregnancyService from '../../services/userPregnancyService';

const UserpregnancyPage = () => {
  const [formData, setFormData] = useState({
    momId: '',
    startDate: null,
    dueDate: null,
    notes: '',
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    setError('');
    setSuccessMessage('');
  };

  const handleDateChange = (name, date) => {
    setFormData(prev => ({
      ...prev,
      [name]: date
    }));
    setError('');
    setSuccessMessage('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccessMessage('');
    setLoading(true);

    // Basic validation
    if (!formData.momId || !formData.startDate || !formData.dueDate || !formData.notes) {
      setError('Vui lòng điền đầy đủ thông tin bắt buộc.');
      setLoading(false);
      return;
    }

    // Prepare data for API (adjust keys based on your backend API requirements)
    const dataToSend = {
      MomID: parseInt(formData.momId), // Assuming INT maps to number
      StartDate: formData.startDate ? formData.startDate.toISOString() : null, // Format date
      DueDate: formData.dueDate ? formData.dueDate.toISOString() : null, // Format date
      Notes: formData.notes,
      // PregnancyID and CreatedAt are likely generated by the backend
    };

    console.log('Submitting User Pregnancy data:', dataToSend);

    try {
      // Replace with your actual API call
      // const response = await userPregnancyService.createUserPregnancy(dataToSend);
      
      // Simulate API call success
      await new Promise(resolve => setTimeout(resolve, 1500)); 
      console.log('Simulated API success for User Pregnancy');
      setSuccessMessage('Thông tin thai kỳ của người dùng đã được lưu thành công!');
      setFormData({
        momId: '',
        startDate: null,
        dueDate: null,
        notes: '',
      }); // Clear form on success

    } catch (apiError) {
      console.error('User Pregnancy API Error:', apiError);
      setError('Lưu thông tin thai kỳ thất bại. Vui lòng thử lại.');
      // More detailed error handling based on apiError structure might be needed
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="user-pregnancy-container">
      <div className="user-pregnancy-form">
        <h1>Nhập thông tin thai kỳ của người dùng</h1>

        {error && <div className="error-message">{error}</div>}
        {successMessage && <div className="success-message">{successMessage}</div>}

        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="momId">Mã người dùng (MomID)</label>
            <input type="number" id="momId" name="momId" value={formData.momId} onChange={handleChange} required />
          </div>

          <div className="form-group">
            <label htmlFor="startDate">Ngày bắt đầu thai kỳ</label>
            <DatePicker 
              selected={formData.startDate}
              onChange={(date) => handleDateChange('startDate', date)}
              dateFormat="dd/MM/yyyy"
              placeholderText="Chọn ngày"
              customInput={<input type="text" id="startDate" name="startDate" required />}
              showIcon
              icon={<FaCalendarAlt className="icon" />}
            />
          </div>

          <div className="form-group">
            <label htmlFor="dueDate">Ngày dự sinh</label>
            <DatePicker 
              selected={formData.dueDate}
              onChange={(date) => handleDateChange('dueDate', date)}
              dateFormat="dd/MM/yyyy"
              placeholderText="Chọn ngày"
              customInput={<input type="text" id="dueDate" name="dueDate" required />}
              showIcon
              icon={<FaCalendarAlt className="icon" />}
            />
          </div>

          <div className="form-group">
            <label htmlFor="notes">Ghi chú</label>
            <textarea id="notes" name="notes" value={formData.notes} onChange={handleChange} required rows="4"></textarea>
          </div>

          <button type="submit" disabled={loading}>
            {loading ? 'Đang lưu...' : 'Lưu thông tin thai kỳ'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default UserpregnancyPage;